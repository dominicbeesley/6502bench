<!--
Copyright 2019 faddenSoft

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<Window x:Class="SourceGen.WpfGui.EditAddress"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns:local="clr-namespace:SourceGen.WpfGui"
        mc:Ignorable="d"
        Title="Edit Address Region"
        Width="350" SizeToContent="Height" ResizeMode="NoResize"
        ShowInTaskbar="False" WindowStartupLocation="CenterOwner"
        ContentRendered="Window_ContentRendered">

    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BoolToVis"/>

        <system:String x:Key="str_HdrCreate">Creating new address region.</system:String>
        <system:String x:Key="str_HdrEdit">Editing existing address region:</system:String>

        <system:String x:Key="str_OptEditAsIsSummary">
            Edit attributes.
        </system:String>
        <system:String x:Key="str_OptEditAsIs">
            Edit the region's attributes.  The region's length will not be changed.
        </system:String>
        <system:String x:Key="str_OptEditAndFixSummary">
            Fix end point.
        </system:String>
        <system:String x:Key="str_OptEditAndFix">
            Convert the floating end to a fixed end, using the current length, and edit
            the region's attributes.
        </system:String>
        <system:String x:Key="str_EditFixedAlreadyFixed">
            Option to set fixed end not available: end point is already fixed.
        </system:String>
        <system:String x:Key="str_OptResizeSummary">
            Resize.
        </system:String>
        <system:String x:Key="str_OptResize" xml:space="preserve"
            >Resize the region to the current selection, and edit the region's attributes.  The new end point will be:&#x0a;Offset: {0}&#x0a;Length: {1}</system:String>
        <system:String x:Key="str_OptResizeFail">
            Option to resize not available: cannot resize to the selection.  {0}
        </system:String>
        <system:String x:Key="str_CreateFixedSummary">
            Create fixed.
        </system:String>
        <system:String x:Key="str_CreateFixed">
            Create a new region, with a fixed end point.  The region will start at {0}
            and have a length of {1}.
        </system:String>
        <system:String x:Key="str_CreateFixedFail">
            Create fixed not available: unable to create a new region with a fixed end point here.
        </system:String>
        <system:String x:Key="str_CreateFixedFailStraddle">
            Create fixed not available: unable to create a new region with a fixed end point
            here, because it would straddle an existing region.
        </system:String>
        <system:String x:Key="str_CreateFloatingSummary">
            Create floating.
        </system:String>
        <system:String x:Key="str_CreateFloating">
            Create a new region, with a floating end point.  The region will start at {0}
            and end at the next region boundary.  Currently, the length is {1}, but that
            may change as other regions are added and removed.
        </system:String>
        <system:String x:Key="str_CreateFloatingFail">
            Option to create floating region not available: unable to create a new region with a floating end point here.
        </system:String>

        <system:String x:Key="str_ErrInternal">Internal error.</system:String>
        <system:String x:Key="str_ErrInvalidValue">Internal error (invalid value).</system:String>
        <system:String x:Key="str_ErrOverlapExisting">
            The new region would have the same start offset and length as an existing region.
        </system:String>
        <system:String x:Key="str_ErrOverlapFloating">
            The start offset of the new region would be the same as the start offset of an existing
            region, and one or both have a floating end point.
        </system:String>
        <system:String x:Key="str_ErrStraddleExisting">
            The new region straddles the start or end of an existing region.
        </system:String>
    </Window.Resources>

    <StackPanel Margin="8">
        <TextBlock Text="{Binding OperationStr, FallbackValue=Editing existing address region:}"/>
        <Grid Visibility="{Binding ShowExistingRegion, Converter={StaticResource BoolToVis}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <TextBlock Grid.Column="0" Grid.Row="0" Margin="8,0,0,0" Text="Address:"/>
            <TextBlock Grid.Column="1" Grid.Row="0" Margin="4,2,0,0"
                       Text="{Binding RegionAddressStr, FallbackValue=$1234}"
                       FontFamily="{StaticResource GeneralMonoFont}"/>

            <TextBlock Grid.Column="0" Grid.Row="1" Margin="8,0,0,0" Text="Start:"/>
            <TextBlock Grid.Column="1" Grid.Row="1" Margin="4,2,0,0"
                       Text="{Binding RegionStartOffsetStr, FallbackValue=+123456}"
                       FontFamily="{StaticResource GeneralMonoFont}"/>
            <TextBlock Grid.Column="0" Grid.Row="2" Margin="8,0,0,0" Text="End:"/>
            <StackPanel Grid.Column="1" Grid.Row="2" Margin="4,0,0,0" Orientation="Horizontal">
                <TextBlock Margin="0,2,0,0"
                           Text="{Binding RegionEndOffsetStr, FallbackValue=+123456}"
                           FontFamily="{StaticResource GeneralMonoFont}"/>
                <TextBlock Text="(floating)" Margin="4,0,0,0" FontWeight="Bold"
                           Visibility="{Binding IsFloating, Converter={StaticResource BoolToVis}}"/>
            </StackPanel>

            <TextBlock Grid.Column="0" Grid.Row="3" Margin="8,0,0,0" Text="Length:"/>
            <TextBlock Grid.Column="1" Grid.Row="3" Margin="4,2,0,0"
                       Text="{Binding RegionLengthStr, FallbackValue=23456 ($1234)}"
                       FontFamily="{StaticResource GeneralMonoFont}"/>
        </Grid>

        <RadioButton Name="radioOption1" Margin="0,12,0,0"
                     Visibility="{Binding ShowOption1, Converter={StaticResource BoolToVis}}"
                     IsEnabled="{Binding EnableOption1}"
                     IsChecked="{Binding CheckOption1}">
            <RadioButton.Content>
                <TextBlock Name="option1TextBlock" TextWrapping="Wrap" Text="Option 1"/>
            </RadioButton.Content>
        </RadioButton>
        <RadioButton Name="radioOption2" Margin="0,4,0,0"
                     Visibility="{Binding ShowOption2, Converter={StaticResource BoolToVis}}"
                     IsEnabled="{Binding EnableOption2}"
                     IsChecked="{Binding CheckOption2}">
            <RadioButton.Content>
                <TextBlock Name="option2TextBlock" TextWrapping="Wrap" Text="Option 2"/>
            </RadioButton.Content>
        </RadioButton>

        <Border Visibility="{Binding ShowErrorMessage, Converter={StaticResource BoolToVis}}"
                BorderThickness="1" Padding="1" Margin="0,6"
                BorderBrush="Red">
            <TextBlock TextWrapping="Wrap" Width="300"
                       Text="{Binding ErrorMessageStr, FallbackValue=Error Message}"/>
        </Border>

        <!--<Rectangle HorizontalAlignment="Stretch" Fill="LightGray" Height="2" Margin="0,8,0,0"/>-->

        <StackPanel IsEnabled="{Binding EnableAttributeControls}">
            <StackPanel Orientation="Horizontal" Margin="0,16,0,0">
                <TextBlock Text="Address (hex):"/>

                <TextBox Name="addrTextBox" Width="100" Margin="4,1,0,0"
                         FontFamily="{StaticResource GeneralMonoFont}"
                         Text="{Binding Path=AddressText, UpdateSourceTrigger=PropertyChanged}"
                         IsInactiveSelectionHighlightEnabled="True">
                    <TextBox.Resources>
                        <!-- default non-focus highlight color is nearly invisible -->
                        <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                                         Color="LightBlue"/>
                    </TextBox.Resources>
                </TextBox>
            </StackPanel>

            <TextBlock Name="enterAddressLabel" Margin="0,4,0,0"
                       Text="• Enter 16-bit or 24-bit address, e.g. $1000 or 01/be00"/>
            <TextBlock Text="• Enter 'NA' to mark the region non-addressable"/>
        </StackPanel>

        <StackPanel IsEnabled="{Binding EnableAttributeControls}">
            <GroupBox Header="Advanced" Padding="2,4" Margin="0,16,0,0">
                <StackPanel>
                    <CheckBox Content="Use relative addressing"
                              IsChecked="{Binding UseRelativeAddressing}"/>
                    <CheckBox Content="Disallow inbound address resolution" Margin="0,8,0,0"
                              IsChecked="{Binding DisallowInwardRes}"/>
                    <CheckBox Content="Disallow outbound address resolution" Margin="0,4,0,0"
                              IsChecked="{Binding DisallowOutwardRes}"/>

                    <StackPanel Orientation="Horizontal" Margin="0,16,0,0">
                        <TextBlock Text="Pre-label:"/>
                        <TextBox Name="preLabelTextBox" Width="100" Margin="4,1,0,0"
                             FontFamily="{StaticResource GeneralMonoFont}"
                             Text="{Binding Path=PreLabelText, UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBlock Text="(address: " Margin="8,0,0,0"/>
                        <TextBlock Text="{Binding Path=PreLabelAddressStr, FallbackValue=$1234}"
                                   Margin="0,2,0,0"
                                   FontFamily="{StaticResource GeneralMonoFont}"/>
                        <TextBlock Text=")"/>
                    </StackPanel>

                    <TextBlock Name="validSyntaxLabel" Margin="0,4,0,0"
                               Text="• Must be valid label syntax; may not be a local label"/>
                    <TextBlock Name="notDuplicateLabel"
                               Text="• Must not be a duplicate of an existing label"/>
                    <TextBlock Name="parentNonAddrLabel"
                               Text="• Will not appear if parent region is non-addressable"/>
                </StackPanel>
            </GroupBox>
        </StackPanel>

        <DockPanel Margin="0,10,0,0" LastChildFill="False">
            <Button DockPanel.Dock="Left" Content="Delete Region" Width="120"
                    IsEnabled="{Binding CanDeleteRegion}" Click="DeleteRegion_Click"/>
            <Button DockPanel.Dock="Right" Content="Cancel" Width="70" Margin="4,0,0,0" IsCancel="True"/>
            <Button DockPanel.Dock="Right" Grid.Column="1" Content="OK" Width="70"
                    IsDefault="True" IsEnabled="{Binding IsValid}" Click="OkButton_Click"/>
        </DockPanel>

    </StackPanel>
</Window>
